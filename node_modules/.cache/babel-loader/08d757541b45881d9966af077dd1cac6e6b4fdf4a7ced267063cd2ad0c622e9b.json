{"ast":null,"code":"import * as THREE from 'three';\n\n// Mapeamento de modelos para suas texturas\nconst modelTextureMap = {\n  'archer.fbx': 'archer.png',\n  'warrior.fbx': 'warrior.png',\n  'wizard.fbx': 'wizard.png'\n};\n\n/**\r\n * Aplica textura a um modelo FBX\r\n * @param {THREE.Object3D} model - O modelo FBX carregado\r\n * @param {string} modelName - Nome do arquivo do modelo (ex: 'archer.fbx')\r\n * @returns {Promise} - Promise que resolve quando a textura é aplicada\r\n */\nexport const applyTextureToModel = (model, modelName) => {\n  return new Promise((resolve, reject) => {\n    const textureName = modelTextureMap[modelName];\n    if (!textureName) {\n      console.warn(`No texture mapping found for model: ${modelName}`);\n      resolve(model);\n      return;\n    }\n    const textureLoader = new THREE.TextureLoader();\n    const texturePath = `/assets/textures/${textureName}`;\n    textureLoader.load(texturePath, texture => {\n      // Configurar a textura\n      texture.colorSpace = THREE.SRGBColorSpace;\n      texture.flipY = false; // Importante para texturas FBX\n\n      // Aplicar a textura a todos os meshes do modelo\n      model.traverse(child => {\n        if (child.isMesh) {\n          // Criar novo material com a textura\n          const material = new THREE.MeshStandardMaterial({\n            map: texture,\n            roughness: 0.7,\n            metalness: 0.3\n          });\n          child.material = material;\n        }\n      });\n      resolve(model);\n    }, undefined, error => {\n      console.error(`Error loading texture for ${modelName}:`, error);\n      reject(error);\n    });\n  });\n};\n\n/**\r\n * Carrega e aplica textura a um modelo FBX\r\n * @param {THREE.Object3D} model - O modelo FBX carregado\r\n * @param {string} modelName - Nome do arquivo do modelo\r\n * @returns {Promise} - Promise que resolve com o modelo texturizado\r\n */\nexport const loadAndApplyTexture = async (model, modelName) => {\n  try {\n    const texturedModel = await applyTextureToModel(model, modelName);\n    return texturedModel;\n  } catch (error) {\n    console.error(`Failed to apply texture to ${modelName}:`, error);\n    return model; // Retorna o modelo original em caso de erro\n  }\n};","map":{"version":3,"names":["THREE","modelTextureMap","applyTextureToModel","model","modelName","Promise","resolve","reject","textureName","console","warn","textureLoader","TextureLoader","texturePath","load","texture","colorSpace","SRGBColorSpace","flipY","traverse","child","isMesh","material","MeshStandardMaterial","map","roughness","metalness","undefined","error","loadAndApplyTexture","texturedModel"],"sources":["M:/DemoGame/src/utils/textureLoader.js"],"sourcesContent":["import * as THREE from 'three';\r\n\r\n// Mapeamento de modelos para suas texturas\r\nconst modelTextureMap = {\r\n  'archer.fbx': 'archer.png',\r\n  'warrior.fbx': 'warrior.png',\r\n  'wizard.fbx': 'wizard.png'\r\n};\r\n\r\n/**\r\n * Aplica textura a um modelo FBX\r\n * @param {THREE.Object3D} model - O modelo FBX carregado\r\n * @param {string} modelName - Nome do arquivo do modelo (ex: 'archer.fbx')\r\n * @returns {Promise} - Promise que resolve quando a textura é aplicada\r\n */\r\nexport const applyTextureToModel = (model, modelName) => {\r\n  return new Promise((resolve, reject) => {\r\n    const textureName = modelTextureMap[modelName];\r\n    if (!textureName) {\r\n      console.warn(`No texture mapping found for model: ${modelName}`);\r\n      resolve(model);\r\n      return;\r\n    }\r\n\r\n    const textureLoader = new THREE.TextureLoader();\r\n    const texturePath = `/assets/textures/${textureName}`;\r\n\r\n    textureLoader.load(\r\n      texturePath,\r\n      (texture) => {\r\n        // Configurar a textura\r\n        texture.colorSpace = THREE.SRGBColorSpace;\r\n        texture.flipY = false; // Importante para texturas FBX\r\n\r\n        // Aplicar a textura a todos os meshes do modelo\r\n        model.traverse((child) => {\r\n          if (child.isMesh) {\r\n            // Criar novo material com a textura\r\n            const material = new THREE.MeshStandardMaterial({\r\n              map: texture,\r\n              roughness: 0.7,\r\n              metalness: 0.3\r\n            });\r\n            child.material = material;\r\n          }\r\n        });\r\n\r\n        resolve(model);\r\n      },\r\n      undefined,\r\n      (error) => {\r\n        console.error(`Error loading texture for ${modelName}:`, error);\r\n        reject(error);\r\n      }\r\n    );\r\n  });\r\n};\r\n\r\n/**\r\n * Carrega e aplica textura a um modelo FBX\r\n * @param {THREE.Object3D} model - O modelo FBX carregado\r\n * @param {string} modelName - Nome do arquivo do modelo\r\n * @returns {Promise} - Promise que resolve com o modelo texturizado\r\n */\r\nexport const loadAndApplyTexture = async (model, modelName) => {\r\n  try {\r\n    const texturedModel = await applyTextureToModel(model, modelName);\r\n    return texturedModel;\r\n  } catch (error) {\r\n    console.error(`Failed to apply texture to ${modelName}:`, error);\r\n    return model; // Retorna o modelo original em caso de erro\r\n  }\r\n}; "],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;;AAE9B;AACA,MAAMC,eAAe,GAAG;EACtB,YAAY,EAAE,YAAY;EAC1B,aAAa,EAAE,aAAa;EAC5B,YAAY,EAAE;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAGA,CAACC,KAAK,EAAEC,SAAS,KAAK;EACvD,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,WAAW,GAAGP,eAAe,CAACG,SAAS,CAAC;IAC9C,IAAI,CAACI,WAAW,EAAE;MAChBC,OAAO,CAACC,IAAI,CAAC,uCAAuCN,SAAS,EAAE,CAAC;MAChEE,OAAO,CAACH,KAAK,CAAC;MACd;IACF;IAEA,MAAMQ,aAAa,GAAG,IAAIX,KAAK,CAACY,aAAa,CAAC,CAAC;IAC/C,MAAMC,WAAW,GAAG,oBAAoBL,WAAW,EAAE;IAErDG,aAAa,CAACG,IAAI,CAChBD,WAAW,EACVE,OAAO,IAAK;MACX;MACAA,OAAO,CAACC,UAAU,GAAGhB,KAAK,CAACiB,cAAc;MACzCF,OAAO,CAACG,KAAK,GAAG,KAAK,CAAC,CAAC;;MAEvB;MACAf,KAAK,CAACgB,QAAQ,CAAEC,KAAK,IAAK;QACxB,IAAIA,KAAK,CAACC,MAAM,EAAE;UAChB;UACA,MAAMC,QAAQ,GAAG,IAAItB,KAAK,CAACuB,oBAAoB,CAAC;YAC9CC,GAAG,EAAET,OAAO;YACZU,SAAS,EAAE,GAAG;YACdC,SAAS,EAAE;UACb,CAAC,CAAC;UACFN,KAAK,CAACE,QAAQ,GAAGA,QAAQ;QAC3B;MACF,CAAC,CAAC;MAEFhB,OAAO,CAACH,KAAK,CAAC;IAChB,CAAC,EACDwB,SAAS,EACRC,KAAK,IAAK;MACTnB,OAAO,CAACmB,KAAK,CAAC,6BAA6BxB,SAAS,GAAG,EAAEwB,KAAK,CAAC;MAC/DrB,MAAM,CAACqB,KAAK,CAAC;IACf,CACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAO1B,KAAK,EAAEC,SAAS,KAAK;EAC7D,IAAI;IACF,MAAM0B,aAAa,GAAG,MAAM5B,mBAAmB,CAACC,KAAK,EAAEC,SAAS,CAAC;IACjE,OAAO0B,aAAa;EACtB,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdnB,OAAO,CAACmB,KAAK,CAAC,8BAA8BxB,SAAS,GAAG,EAAEwB,KAAK,CAAC;IAChE,OAAOzB,KAAK,CAAC,CAAC;EAChB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}