{"ast":null,"code":"var _jsxFileName = \"M:\\\\DemoGame\\\\src\\\\components\\\\CanvasScene.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasScene = () => {\n  _s();\n  const mountRef = useRef(null);\n  const [loading, setLoading] = useState(true);\n  const characterRef = useRef(null);\n  const cameraRef = useRef(null);\n  const controlsRef = useRef(null);\n\n  // Function to focus camera on character\n  const focusOnCharacter = () => {\n    if (!characterRef.current || !cameraRef.current || !controlsRef.current) return;\n    const box = new THREE.Box3().setFromObject(characterRef.current);\n    const center = box.getCenter(new THREE.Vector3());\n    const size = box.getSize(new THREE.Vector3());\n    const maxDim = Math.max(size.x, size.y, size.z);\n\n    // Position camera at a good distance based on model size\n    const distance = maxDim * 3;\n    cameraRef.current.position.set(center.x + distance, center.y + distance * 0.5, center.z + distance);\n    cameraRef.current.lookAt(center);\n    controlsRef.current.target.copy(center);\n  };\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x87ceeb); // Sky blue background\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    cameraRef.current = camera;\n    camera.position.set(15, 15, 15);\n    camera.lookAt(0, 0, 0);\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create green floor\n    const floorSize = 30;\n    const floorGeometry = new THREE.PlaneGeometry(floorSize, floorSize);\n    const floorMaterial = new THREE.MeshStandardMaterial({\n      color: 0x2ecc71,\n      // Bright green color\n      roughness: 0.8,\n      metalness: 0.2\n    });\n    const floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    floor.rotation.x = -Math.PI / 2; // Rotate to be horizontal\n    floor.receiveShadow = true;\n    scene.add(floor);\n\n    // Add grid helper for better visualization\n    const gridHelper = new THREE.GridHelper(floorSize, 30, 0x000000, 0x000000);\n    scene.add(gridHelper);\n\n    // Lighting setup\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(10, 20, 10);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.mapSize.width = 2048;\n    directionalLight.shadow.mapSize.height = 2048;\n    scene.add(directionalLight);\n\n    // Camera controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controlsRef.current = controls;\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.minDistance = 5;\n    controls.maxDistance = 50;\n    controls.maxPolarAngle = Math.PI / 2; // Prevent going below floor\n\n    // Load character model\n    const loader = new OBJLoader();\n    loader.load('/assets/models/characters/raku_obj.obj', object => {\n      characterRef.current = object;\n\n      // Center the model\n      const box = new THREE.Box3().setFromObject(object);\n      const center = box.getCenter(new THREE.Vector3());\n      object.position.sub(center);\n\n      // Scale the model to be more visible\n      const size = box.getSize(new THREE.Vector3());\n      const maxDim = Math.max(size.x, size.y, size.z);\n      const scale = 8 / maxDim; // Make it 8 units tall\n      object.scale.multiplyScalar(scale);\n\n      // Position at the edge of the floor\n      object.position.set(-floorSize / 2 + 2, 0, -floorSize / 2 + 2);\n\n      // Add materials to all meshes\n      object.traverse(child => {\n        if (child instanceof THREE.Mesh) {\n          child.castShadow = true;\n          child.receiveShadow = true;\n          child.material = new THREE.MeshStandardMaterial({\n            color: 0xff0000,\n            // Bright red for visibility\n            roughness: 0.5,\n            metalness: 0.5\n          });\n        }\n      });\n      scene.add(object);\n      setLoading(false);\n      focusOnCharacter(); // Focus on character when loaded\n    }, xhr => {\n      console.log(xhr.loaded / xhr.total * 100 + '% loaded');\n    }, error => {\n      console.error('Error loading model:', error);\n      setLoading(false);\n    });\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (mountRef.current) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      scene.clear();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        color: 'white',\n        fontSize: '20px',\n        textShadow: '2px 2px 4px rgba(0,0,0,0.5)'\n      },\n      children: \"Loading Character...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: focusOnCharacter,\n      style: {\n        position: 'absolute',\n        bottom: '20px',\n        right: '20px',\n        padding: '10px 20px',\n        backgroundColor: 'rgba(255, 255, 255, 0.8)',\n        border: 'none',\n        borderRadius: '5px',\n        cursor: 'pointer',\n        zIndex: 1000\n      },\n      children: \"Focus on Character\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s(CanvasScene, \"m9lnfSYDsVzNxHYq6B5tP7jUb58=\");\n_c = CanvasScene;\nexport default CanvasScene;\nvar _c;\n$RefreshReg$(_c, \"CanvasScene\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","OrbitControls","OBJLoader","jsxDEV","_jsxDEV","CanvasScene","_s","mountRef","loading","setLoading","characterRef","cameraRef","controlsRef","focusOnCharacter","current","box","Box3","setFromObject","center","getCenter","Vector3","size","getSize","maxDim","Math","max","x","y","z","distance","position","set","lookAt","target","copy","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","type","PCFSoftShadowMap","appendChild","domElement","floorSize","floorGeometry","PlaneGeometry","floorMaterial","MeshStandardMaterial","color","roughness","metalness","floor","Mesh","rotation","PI","receiveShadow","add","gridHelper","GridHelper","ambientLight","AmbientLight","directionalLight","DirectionalLight","castShadow","shadow","mapSize","width","height","controls","enableDamping","dampingFactor","minDistance","maxDistance","maxPolarAngle","loader","load","object","sub","scale","multiplyScalar","traverse","child","material","xhr","console","log","loaded","total","error","handleResize","aspect","updateProjectionMatrix","addEventListener","animate","requestAnimationFrame","update","render","removeEventListener","removeChild","clear","style","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","top","left","transform","fontSize","textShadow","onClick","bottom","right","padding","backgroundColor","border","borderRadius","cursor","zIndex","_c","$RefreshReg$"],"sources":["M:/DemoGame/src/components/CanvasScene.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\r\n\r\nconst CanvasScene = () => {\r\n  const mountRef = useRef(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const characterRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const controlsRef = useRef(null);\r\n\r\n  // Function to focus camera on character\r\n  const focusOnCharacter = () => {\r\n    if (!characterRef.current || !cameraRef.current || !controlsRef.current) return;\r\n    \r\n    const box = new THREE.Box3().setFromObject(characterRef.current);\r\n    const center = box.getCenter(new THREE.Vector3());\r\n    const size = box.getSize(new THREE.Vector3());\r\n    const maxDim = Math.max(size.x, size.y, size.z);\r\n    \r\n    // Position camera at a good distance based on model size\r\n    const distance = maxDim * 3;\r\n    cameraRef.current.position.set(\r\n      center.x + distance,\r\n      center.y + distance * 0.5,\r\n      center.z + distance\r\n    );\r\n    cameraRef.current.lookAt(center);\r\n    controlsRef.current.target.copy(center);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!mountRef.current) return;\r\n\r\n    // Scene setup\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0x87ceeb); // Sky blue background\r\n\r\n    // Camera setup\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    cameraRef.current = camera;\r\n    camera.position.set(15, 15, 15);\r\n    camera.lookAt(0, 0, 0);\r\n\r\n    // Renderer setup\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n    mountRef.current.appendChild(renderer.domElement);\r\n\r\n    // Create green floor\r\n    const floorSize = 30;\r\n    const floorGeometry = new THREE.PlaneGeometry(floorSize, floorSize);\r\n    const floorMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x2ecc71, // Bright green color\r\n      roughness: 0.8,\r\n      metalness: 0.2\r\n    });\r\n    const floor = new THREE.Mesh(floorGeometry, floorMaterial);\r\n    floor.rotation.x = -Math.PI / 2; // Rotate to be horizontal\r\n    floor.receiveShadow = true;\r\n    scene.add(floor);\r\n\r\n    // Add grid helper for better visualization\r\n    const gridHelper = new THREE.GridHelper(floorSize, 30, 0x000000, 0x000000);\r\n    scene.add(gridHelper);\r\n\r\n    // Lighting setup\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\r\n    scene.add(ambientLight);\r\n\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n    directionalLight.position.set(10, 20, 10);\r\n    directionalLight.castShadow = true;\r\n    directionalLight.shadow.mapSize.width = 2048;\r\n    directionalLight.shadow.mapSize.height = 2048;\r\n    scene.add(directionalLight);\r\n\r\n    // Camera controls\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controlsRef.current = controls;\r\n    controls.enableDamping = true;\r\n    controls.dampingFactor = 0.05;\r\n    controls.minDistance = 5;\r\n    controls.maxDistance = 50;\r\n    controls.maxPolarAngle = Math.PI / 2; // Prevent going below floor\r\n\r\n    // Load character model\r\n    const loader = new OBJLoader();\r\n    loader.load(\r\n      '/assets/models/characters/raku_obj.obj',\r\n      (object) => {\r\n        characterRef.current = object;\r\n        \r\n        // Center the model\r\n        const box = new THREE.Box3().setFromObject(object);\r\n        const center = box.getCenter(new THREE.Vector3());\r\n        object.position.sub(center);\r\n\r\n        // Scale the model to be more visible\r\n        const size = box.getSize(new THREE.Vector3());\r\n        const maxDim = Math.max(size.x, size.y, size.z);\r\n        const scale = 8 / maxDim; // Make it 8 units tall\r\n        object.scale.multiplyScalar(scale);\r\n\r\n        // Position at the edge of the floor\r\n        object.position.set(-floorSize/2 + 2, 0, -floorSize/2 + 2);\r\n\r\n        // Add materials to all meshes\r\n        object.traverse((child) => {\r\n          if (child instanceof THREE.Mesh) {\r\n            child.castShadow = true;\r\n            child.receiveShadow = true;\r\n            child.material = new THREE.MeshStandardMaterial({\r\n              color: 0xff0000, // Bright red for visibility\r\n              roughness: 0.5,\r\n              metalness: 0.5\r\n            });\r\n          }\r\n        });\r\n\r\n        scene.add(object);\r\n        setLoading(false);\r\n        focusOnCharacter(); // Focus on character when loaded\r\n      },\r\n      (xhr) => {\r\n        console.log((xhr.loaded / xhr.total * 100) + '% loaded');\r\n      },\r\n      (error) => {\r\n        console.error('Error loading model:', error);\r\n        setLoading(false);\r\n      }\r\n    );\r\n\r\n    // Handle window resize\r\n    const handleResize = () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    // Animation loop\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      controls.update();\r\n      renderer.render(scene, camera);\r\n    };\r\n    animate();\r\n\r\n    // Cleanup\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      if (mountRef.current) {\r\n        mountRef.current.removeChild(renderer.domElement);\r\n      }\r\n      scene.clear();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ width: '100%', height: '100%', position: 'relative' }}>\r\n      <div ref={mountRef} style={{ width: '100%', height: '100%' }} />\r\n      {loading && (\r\n        <div style={{\r\n          position: 'absolute',\r\n          top: '50%',\r\n          left: '50%',\r\n          transform: 'translate(-50%, -50%)',\r\n          color: 'white',\r\n          fontSize: '20px',\r\n          textShadow: '2px 2px 4px rgba(0,0,0,0.5)'\r\n        }}>\r\n          Loading Character...\r\n        </div>\r\n      )}\r\n      <button\r\n        onClick={focusOnCharacter}\r\n        style={{\r\n          position: 'absolute',\r\n          bottom: '20px',\r\n          right: '20px',\r\n          padding: '10px 20px',\r\n          backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n          border: 'none',\r\n          borderRadius: '5px',\r\n          cursor: 'pointer',\r\n          zIndex: 1000\r\n        }}\r\n      >\r\n        Focus on Character\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CanvasScene;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}