{"ast":null,"code":"var _jsxFileName = \"M:\\\\DemoGame\\\\src\\\\components\\\\CanvasScene.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\nimport { loadAndApplyTexture } from '../utils/textureLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasScene = () => {\n  _s();\n  const mountRef = useRef(null);\n  const charactersRef = useRef([]);\n  useEffect(() => {\n    // 1. Configuração básica da cena\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x87ceeb);\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(25, 25, 25);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    mountRef.current.appendChild(renderer.domElement);\n\n    // 2. Chão com grid mais visível\n    const floorSize = 50;\n    const floor = new THREE.Mesh(new THREE.PlaneGeometry(floorSize, floorSize), new THREE.MeshStandardMaterial({\n      color: 0x2ecc71,\n      roughness: 0.8,\n      metalness: 0.2\n    }));\n    floor.rotation.x = -Math.PI / 2;\n    floor.receiveShadow = true;\n    scene.add(floor);\n\n    // Grid helper mais destacado\n    const gridHelper = new THREE.GridHelper(floorSize, 20, 0x555555, 0x888888);\n    scene.add(gridHelper);\n\n    // 3. Iluminação melhorada\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(15, 30, 15);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.mapSize.width = 1024;\n    directionalLight.shadow.mapSize.height = 1024;\n    scene.add(directionalLight);\n\n    // 4. Controles da câmera\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.minDistance = 10;\n    controls.maxDistance = 50;\n\n    // 5. Carregar e posicionar personagens\n    const loader = new FBXLoader();\n    const characterPaths = ['/assets/models/characters/archer.fbx', '/assets/models/characters/warrior.fbx', '/assets/models/characters/wizard.fbx'];\n\n    // Posições em unidades do grid (cada quadrado = 2.5 unidades)\n    const gridSpacing = floorSize / 20; // 2.5 unidades por quadrado\n    const positions = [{\n      x: -2 * gridSpacing,\n      z: 0\n    },\n    // Archer 2 quadrados à esquerda\n    {\n      x: 0,\n      z: 0\n    },\n    // Warrior no centro\n    {\n      x: 2 * gridSpacing,\n      z: 0\n    } // Wizard 2 quadrados à direita\n    ];\n    characterPaths.forEach((path, index) => {\n      loader.load(path, async fbx => {\n        // Calcular tamanho do modelo\n        const bbox = new THREE.Box3().setFromObject(fbx);\n        const size = bbox.getSize(new THREE.Vector3());\n        const maxDimension = Math.max(size.x, size.y, size.z);\n\n        // Escala para ocupar ~1 quadrado (2.5 unidades)\n        const targetSize = gridSpacing * 0.8; // 80% do quadrado\n        const scale = targetSize / maxDimension;\n        fbx.scale.set(scale, scale, scale);\n\n        // Centralizar e posicionar\n        const center = bbox.getCenter(new THREE.Vector3());\n        fbx.position.copy(positions[index]).sub(center.multiplyScalar(scale));\n\n        // Ajustar posição Y para colocar no chão\n        const bottomY = bbox.min.y * scale;\n        fbx.position.y = -bottomY;\n\n        // Configurar sombras e rotação\n        fbx.traverse(child => {\n          if (child.isMesh) {\n            child.castShadow = true;\n            child.receiveShadow = true;\n          }\n        });\n        fbx.rotation.y = Math.PI;\n\n        // Aplicar textura ao modelo\n        const modelName = path.split('/').pop(); // Pega o nome do arquivo\n        const texturedModel = await loadAndApplyTexture(fbx, modelName);\n        scene.add(texturedModel);\n        charactersRef.current.push(texturedModel);\n\n        // Atualizar câmera quando todos estiverem carregados\n        if (charactersRef.current.length === characterPaths.length) {\n          camera.lookAt(0, 0, 0);\n        }\n      }, undefined, error => {\n        console.error(`Error loading ${path}:`, error);\n      });\n    });\n\n    // 6. Handle resize e animation loop\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n    return () => {\n      var _mountRef$current;\n      window.removeEventListener('resize', handleResize);\n      (_mountRef$current = mountRef.current) === null || _mountRef$current === void 0 ? void 0 : _mountRef$current.removeChild(renderer.domElement);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100vw',\n      height: '100vh',\n      position: 'fixed',\n      top: 0,\n      left: 0\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(CanvasScene, \"SaiTVscznJfVv5iU2UPoLhjKcXs=\");\n_c = CanvasScene;\nexport default CanvasScene;\nvar _c;\n$RefreshReg$(_c, \"CanvasScene\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","FBXLoader","loadAndApplyTexture","jsxDEV","_jsxDEV","CanvasScene","_s","mountRef","charactersRef","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","current","appendChild","domElement","floorSize","floor","Mesh","PlaneGeometry","MeshStandardMaterial","color","roughness","metalness","rotation","x","Math","PI","receiveShadow","add","gridHelper","GridHelper","ambientLight","AmbientLight","directionalLight","DirectionalLight","castShadow","shadow","mapSize","width","height","controls","enableDamping","minDistance","maxDistance","loader","characterPaths","gridSpacing","positions","z","forEach","path","index","load","fbx","bbox","Box3","setFromObject","size","getSize","Vector3","maxDimension","max","y","targetSize","scale","center","getCenter","copy","sub","multiplyScalar","bottomY","min","traverse","child","isMesh","modelName","split","pop","texturedModel","push","length","lookAt","undefined","error","console","handleResize","aspect","updateProjectionMatrix","addEventListener","animate","requestAnimationFrame","update","render","_mountRef$current","removeEventListener","removeChild","ref","style","top","left","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["M:/DemoGame/src/components/CanvasScene.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\r\nimport { loadAndApplyTexture } from '../utils/textureLoader';\r\n\r\nconst CanvasScene = () => {\r\n  const mountRef = useRef(null);\r\n  const charactersRef = useRef([]);\r\n\r\n  useEffect(() => {\r\n    // 1. Configuração básica da cena\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0x87ceeb);\r\n\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    camera.position.set(25, 25, 25);\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.shadowMap.enabled = true;\r\n    mountRef.current.appendChild(renderer.domElement);\r\n\r\n    // 2. Chão com grid mais visível\r\n    const floorSize = 50;\r\n    const floor = new THREE.Mesh(\r\n      new THREE.PlaneGeometry(floorSize, floorSize),\r\n      new THREE.MeshStandardMaterial({\r\n        color: 0x2ecc71,\r\n        roughness: 0.8,\r\n        metalness: 0.2\r\n      })\r\n    );\r\n    floor.rotation.x = -Math.PI / 2;\r\n    floor.receiveShadow = true;\r\n    scene.add(floor);\r\n\r\n    // Grid helper mais destacado\r\n    const gridHelper = new THREE.GridHelper(floorSize, 20, 0x555555, 0x888888);\r\n    scene.add(gridHelper);\r\n\r\n    // 3. Iluminação melhorada\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\r\n    scene.add(ambientLight);\r\n\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n    directionalLight.position.set(15, 30, 15);\r\n    directionalLight.castShadow = true;\r\n    directionalLight.shadow.mapSize.width = 1024;\r\n    directionalLight.shadow.mapSize.height = 1024;\r\n    scene.add(directionalLight);\r\n\r\n    // 4. Controles da câmera\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true;\r\n    controls.minDistance = 10;\r\n    controls.maxDistance = 50;\r\n\r\n    // 5. Carregar e posicionar personagens\r\n    const loader = new FBXLoader();\r\n    const characterPaths = [\r\n      '/assets/models/characters/archer.fbx',\r\n      '/assets/models/characters/warrior.fbx',\r\n      '/assets/models/characters/wizard.fbx'\r\n    ];\r\n\r\n    // Posições em unidades do grid (cada quadrado = 2.5 unidades)\r\n    const gridSpacing = floorSize / 20; // 2.5 unidades por quadrado\r\n    const positions = [\r\n      { x: -2 * gridSpacing, z: 0 }, // Archer 2 quadrados à esquerda\r\n      { x: 0, z: 0 },                // Warrior no centro\r\n      { x: 2 * gridSpacing, z: 0 }   // Wizard 2 quadrados à direita\r\n    ];\r\n\r\n    characterPaths.forEach((path, index) => {\r\n      loader.load(\r\n        path,\r\n        async (fbx) => {\r\n          // Calcular tamanho do modelo\r\n          const bbox = new THREE.Box3().setFromObject(fbx);\r\n          const size = bbox.getSize(new THREE.Vector3());\r\n          const maxDimension = Math.max(size.x, size.y, size.z);\r\n\r\n          // Escala para ocupar ~1 quadrado (2.5 unidades)\r\n          const targetSize = gridSpacing * 0.8; // 80% do quadrado\r\n          const scale = targetSize / maxDimension;\r\n          fbx.scale.set(scale, scale, scale);\r\n\r\n          // Centralizar e posicionar\r\n          const center = bbox.getCenter(new THREE.Vector3());\r\n          fbx.position.copy(positions[index]).sub(center.multiplyScalar(scale));\r\n          \r\n          // Ajustar posição Y para colocar no chão\r\n          const bottomY = bbox.min.y * scale;\r\n          fbx.position.y = -bottomY;\r\n\r\n          // Configurar sombras e rotação\r\n          fbx.traverse(child => {\r\n            if (child.isMesh) {\r\n              child.castShadow = true;\r\n              child.receiveShadow = true;\r\n            }\r\n          });\r\n          fbx.rotation.y = Math.PI;\r\n\r\n          // Aplicar textura ao modelo\r\n          const modelName = path.split('/').pop(); // Pega o nome do arquivo\r\n          const texturedModel = await loadAndApplyTexture(fbx, modelName);\r\n          \r\n          scene.add(texturedModel);\r\n          charactersRef.current.push(texturedModel);\r\n\r\n          // Atualizar câmera quando todos estiverem carregados\r\n          if (charactersRef.current.length === characterPaths.length) {\r\n            camera.lookAt(0, 0, 0);\r\n          }\r\n        },\r\n        undefined,\r\n        (error) => {\r\n          console.error(`Error loading ${path}:`, error);\r\n        }\r\n      );\r\n    });\r\n\r\n    // 6. Handle resize e animation loop\r\n    const handleResize = () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      controls.update();\r\n      renderer.render(scene, camera);\r\n    };\r\n    animate();\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      mountRef.current?.removeChild(renderer.domElement);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={mountRef}\r\n      style={{\r\n        width: '100vw',\r\n        height: '100vh',\r\n        position: 'fixed',\r\n        top: 0,\r\n        left: 0\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CanvasScene;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}