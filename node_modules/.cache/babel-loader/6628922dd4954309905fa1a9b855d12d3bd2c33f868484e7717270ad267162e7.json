{"ast":null,"code":"var _jsxFileName = \"M:\\\\DemoGame\\\\src\\\\components\\\\CanvasScene.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasScene = () => {\n  _s();\n  const mountRef = useRef(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const sceneRef = useRef(null);\n  const cameraRef = useRef(null);\n  const controlsRef = useRef(null);\n  const characterRef = useRef(null);\n  const focusOnCharacter = () => {\n    if (characterRef.current && cameraRef.current && controlsRef.current) {\n      const box = new THREE.Box3().setFromObject(characterRef.current);\n      const center = box.getCenter(new THREE.Vector3());\n      const size = box.getSize(new THREE.Vector3());\n      const maxDim = Math.max(size.x, size.y, size.z);\n      const fov = cameraRef.current.fov * (Math.PI / 180);\n      let cameraZ = Math.abs(maxDim / Math.sin(fov / 2));\n      cameraRef.current.position.set(center.x + cameraZ, center.y + cameraZ / 2, center.z + cameraZ);\n      cameraRef.current.lookAt(center);\n      controlsRef.current.target.copy(center);\n    }\n  };\n  useEffect(() => {\n    if (!mountRef.current) return;\n    try {\n      // Scene setup\n      const scene = new THREE.Scene();\n      sceneRef.current = scene;\n      scene.background = new THREE.Color(0x87ceeb);\n\n      // Camera setup\n      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      cameraRef.current = camera;\n      camera.position.set(10, 10, 10);\n      camera.lookAt(0, 0, 0);\n\n      // Renderer setup\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.shadowMap.enabled = true;\n      renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n      mountRef.current.appendChild(renderer.domElement);\n\n      // Grid helper\n      const gridHelper = new THREE.GridHelper(20, 20, 0x000000, 0x000000);\n      scene.add(gridHelper);\n\n      // Axes helper\n      const axesHelper = new THREE.AxesHelper(5);\n      scene.add(axesHelper);\n\n      // Floor plane\n      const floorGeometry = new THREE.PlaneGeometry(20, 20);\n      const floorMaterial = new THREE.MeshStandardMaterial({\n        color: 0x808080,\n        roughness: 0.8,\n        metalness: 0.2\n      });\n      const floor = new THREE.Mesh(floorGeometry, floorMaterial);\n      floor.rotation.x = -Math.PI / 2;\n      floor.receiveShadow = true;\n      scene.add(floor);\n\n      // Lighting\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n      scene.add(ambientLight);\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n      directionalLight.position.set(5, 5, 5);\n      directionalLight.castShadow = true;\n      directionalLight.shadow.mapSize.width = 1024;\n      directionalLight.shadow.mapSize.height = 1024;\n      scene.add(directionalLight);\n\n      // Controls\n      const controls = new OrbitControls(camera, renderer.domElement);\n      controlsRef.current = controls;\n      controls.enableDamping = true;\n      controls.dampingFactor = 0.05;\n      controls.minDistance = 5;\n      controls.maxDistance = 50;\n      controls.maxPolarAngle = Math.PI / 2;\n\n      // Load character model\n      const loader = new OBJLoader();\n      console.log('Starting to load character model...');\n      loader.load('/assets/models/characters/raku_obj.obj', object => {\n        console.log('Model loaded successfully:', object);\n        characterRef.current = object;\n\n        // Center the model\n        const box = new THREE.Box3().setFromObject(object);\n        const center = box.getCenter(new THREE.Vector3());\n        object.position.sub(center);\n\n        // Scale the model - making it much larger for testing\n        const size = box.getSize(new THREE.Vector3());\n        const maxDim = Math.max(size.x, size.y, size.z);\n        const scale = 10 / maxDim; // Increased scale from 2 to 10\n        object.scale.multiplyScalar(scale);\n\n        // Position on floor\n        object.position.y = 0;\n\n        // Enable shadows and add materials\n        object.traverse(child => {\n          if (child instanceof THREE.Mesh) {\n            console.log('Processing mesh:', child);\n            child.castShadow = true;\n            child.receiveShadow = true;\n\n            // Add a bright material to make it very visible\n            child.material = new THREE.MeshStandardMaterial({\n              color: 0xff0000,\n              // Bright red color\n              roughness: 0.5,\n              metalness: 0.5,\n              emissive: 0x330000,\n              // Slight glow\n              emissiveIntensity: 0.2\n            });\n          }\n        });\n        scene.add(object);\n        console.log('Character added to scene');\n        setLoading(false);\n        // Focus on character after loading\n        focusOnCharacter();\n      }, xhr => {\n        console.log(xhr.loaded / xhr.total * 100 + '% loaded');\n      }, error => {\n        console.error('An error happened while loading the model:', error);\n        setError('Failed to load character model');\n        setLoading(false);\n      });\n\n      // Handle window resize\n      const handleResize = () => {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n      };\n      window.addEventListener('resize', handleResize);\n\n      // Animation loop\n      const animate = () => {\n        requestAnimationFrame(animate);\n        controls.update();\n        renderer.render(scene, camera);\n      };\n      animate();\n\n      // Cleanup\n      return () => {\n        window.removeEventListener('resize', handleResize);\n        if (mountRef.current) {\n          mountRef.current.removeChild(renderer.domElement);\n        }\n        scene.clear();\n      };\n    } catch (err) {\n      console.error('Error setting up scene:', err);\n      setError('Failed to initialize 3D scene');\n      setLoading(false);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        color: 'white',\n        fontSize: '20px',\n        textShadow: '2px 2px 4px rgba(0,0,0,0.5)'\n      },\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        color: 'red',\n        fontSize: '20px',\n        textShadow: '2px 2px 4px rgba(0,0,0,0.5)'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: focusOnCharacter,\n      style: {\n        position: 'absolute',\n        bottom: '20px',\n        right: '20px',\n        padding: '10px 20px',\n        backgroundColor: 'rgba(255, 255, 255, 0.8)',\n        border: 'none',\n        borderRadius: '5px',\n        cursor: 'pointer',\n        zIndex: 1000\n      },\n      children: \"Focus on Character\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n_s(CanvasScene, \"Y5l1qNqLjXUBUlx455UFrjs9W9I=\");\n_c = CanvasScene;\nexport default CanvasScene;\nvar _c;\n$RefreshReg$(_c, \"CanvasScene\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","OrbitControls","OBJLoader","jsxDEV","_jsxDEV","CanvasScene","_s","mountRef","loading","setLoading","error","setError","sceneRef","cameraRef","controlsRef","characterRef","focusOnCharacter","current","box","Box3","setFromObject","center","getCenter","Vector3","size","getSize","maxDim","Math","max","x","y","z","fov","PI","cameraZ","abs","sin","position","set","lookAt","target","copy","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","type","PCFSoftShadowMap","appendChild","domElement","gridHelper","GridHelper","add","axesHelper","AxesHelper","floorGeometry","PlaneGeometry","floorMaterial","MeshStandardMaterial","color","roughness","metalness","floor","Mesh","rotation","receiveShadow","ambientLight","AmbientLight","directionalLight","DirectionalLight","castShadow","shadow","mapSize","width","height","controls","enableDamping","dampingFactor","minDistance","maxDistance","maxPolarAngle","loader","console","log","load","object","sub","scale","multiplyScalar","traverse","child","material","emissive","emissiveIntensity","xhr","loaded","total","handleResize","aspect","updateProjectionMatrix","addEventListener","animate","requestAnimationFrame","update","render","removeEventListener","removeChild","clear","err","style","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","top","left","transform","fontSize","textShadow","onClick","bottom","right","padding","backgroundColor","border","borderRadius","cursor","zIndex","_c","$RefreshReg$"],"sources":["M:/DemoGame/src/components/CanvasScene.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\r\n\r\nconst CanvasScene = () => {\r\n  const mountRef = useRef(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const sceneRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n  const controlsRef = useRef(null);\r\n  const characterRef = useRef(null);\r\n\r\n  const focusOnCharacter = () => {\r\n    if (characterRef.current && cameraRef.current && controlsRef.current) {\r\n      const box = new THREE.Box3().setFromObject(characterRef.current);\r\n      const center = box.getCenter(new THREE.Vector3());\r\n      const size = box.getSize(new THREE.Vector3());\r\n      const maxDim = Math.max(size.x, size.y, size.z);\r\n      const fov = cameraRef.current.fov * (Math.PI / 180);\r\n      let cameraZ = Math.abs(maxDim / Math.sin(fov / 2));\r\n      cameraRef.current.position.set(center.x + cameraZ, center.y + cameraZ/2, center.z + cameraZ);\r\n      cameraRef.current.lookAt(center);\r\n      controlsRef.current.target.copy(center);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!mountRef.current) return;\r\n\r\n    try {\r\n      // Scene setup\r\n      const scene = new THREE.Scene();\r\n      sceneRef.current = scene;\r\n      scene.background = new THREE.Color(0x87ceeb);\r\n\r\n      // Camera setup\r\n      const camera = new THREE.PerspectiveCamera(\r\n        75,\r\n        window.innerWidth / window.innerHeight,\r\n        0.1,\r\n        1000\r\n      );\r\n      cameraRef.current = camera;\r\n      camera.position.set(10, 10, 10);\r\n      camera.lookAt(0, 0, 0);\r\n\r\n      // Renderer setup\r\n      const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n      renderer.shadowMap.enabled = true;\r\n      renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n      mountRef.current.appendChild(renderer.domElement);\r\n\r\n      // Grid helper\r\n      const gridHelper = new THREE.GridHelper(20, 20, 0x000000, 0x000000);\r\n      scene.add(gridHelper);\r\n\r\n      // Axes helper\r\n      const axesHelper = new THREE.AxesHelper(5);\r\n      scene.add(axesHelper);\r\n\r\n      // Floor plane\r\n      const floorGeometry = new THREE.PlaneGeometry(20, 20);\r\n      const floorMaterial = new THREE.MeshStandardMaterial({ \r\n        color: 0x808080,\r\n        roughness: 0.8,\r\n        metalness: 0.2\r\n      });\r\n      const floor = new THREE.Mesh(floorGeometry, floorMaterial);\r\n      floor.rotation.x = -Math.PI / 2;\r\n      floor.receiveShadow = true;\r\n      scene.add(floor);\r\n\r\n      // Lighting\r\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n      scene.add(ambientLight);\r\n\r\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n      directionalLight.position.set(5, 5, 5);\r\n      directionalLight.castShadow = true;\r\n      directionalLight.shadow.mapSize.width = 1024;\r\n      directionalLight.shadow.mapSize.height = 1024;\r\n      scene.add(directionalLight);\r\n\r\n      // Controls\r\n      const controls = new OrbitControls(camera, renderer.domElement);\r\n      controlsRef.current = controls;\r\n      controls.enableDamping = true;\r\n      controls.dampingFactor = 0.05;\r\n      controls.minDistance = 5;\r\n      controls.maxDistance = 50;\r\n      controls.maxPolarAngle = Math.PI / 2;\r\n\r\n      // Load character model\r\n      const loader = new OBJLoader();\r\n      console.log('Starting to load character model...');\r\n      loader.load(\r\n        '/assets/models/characters/raku_obj.obj',\r\n        (object) => {\r\n          console.log('Model loaded successfully:', object);\r\n          characterRef.current = object;\r\n          \r\n          // Center the model\r\n          const box = new THREE.Box3().setFromObject(object);\r\n          const center = box.getCenter(new THREE.Vector3());\r\n          object.position.sub(center);\r\n\r\n          // Scale the model - making it much larger for testing\r\n          const size = box.getSize(new THREE.Vector3());\r\n          const maxDim = Math.max(size.x, size.y, size.z);\r\n          const scale = 10 / maxDim; // Increased scale from 2 to 10\r\n          object.scale.multiplyScalar(scale);\r\n\r\n          // Position on floor\r\n          object.position.y = 0;\r\n\r\n          // Enable shadows and add materials\r\n          object.traverse((child) => {\r\n            if (child instanceof THREE.Mesh) {\r\n              console.log('Processing mesh:', child);\r\n              child.castShadow = true;\r\n              child.receiveShadow = true;\r\n              \r\n              // Add a bright material to make it very visible\r\n              child.material = new THREE.MeshStandardMaterial({\r\n                color: 0xff0000, // Bright red color\r\n                roughness: 0.5,\r\n                metalness: 0.5,\r\n                emissive: 0x330000, // Slight glow\r\n                emissiveIntensity: 0.2\r\n              });\r\n            }\r\n          });\r\n\r\n          scene.add(object);\r\n          console.log('Character added to scene');\r\n          setLoading(false);\r\n          // Focus on character after loading\r\n          focusOnCharacter();\r\n        },\r\n        (xhr) => {\r\n          console.log((xhr.loaded / xhr.total * 100) + '% loaded');\r\n        },\r\n        (error) => {\r\n          console.error('An error happened while loading the model:', error);\r\n          setError('Failed to load character model');\r\n          setLoading(false);\r\n        }\r\n      );\r\n\r\n      // Handle window resize\r\n      const handleResize = () => {\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n      };\r\n      window.addEventListener('resize', handleResize);\r\n\r\n      // Animation loop\r\n      const animate = () => {\r\n        requestAnimationFrame(animate);\r\n        controls.update();\r\n        renderer.render(scene, camera);\r\n      };\r\n      animate();\r\n\r\n      // Cleanup\r\n      return () => {\r\n        window.removeEventListener('resize', handleResize);\r\n        if (mountRef.current) {\r\n          mountRef.current.removeChild(renderer.domElement);\r\n        }\r\n        scene.clear();\r\n      };\r\n    } catch (err) {\r\n      console.error('Error setting up scene:', err);\r\n      setError('Failed to initialize 3D scene');\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ width: '100%', height: '100%', position: 'relative' }}>\r\n      <div ref={mountRef} style={{ width: '100%', height: '100%' }} />\r\n      {loading && (\r\n        <div style={{\r\n          position: 'absolute',\r\n          top: '50%',\r\n          left: '50%',\r\n          transform: 'translate(-50%, -50%)',\r\n          color: 'white',\r\n          fontSize: '20px',\r\n          textShadow: '2px 2px 4px rgba(0,0,0,0.5)'\r\n        }}>\r\n          Loading...\r\n        </div>\r\n      )}\r\n      {error && (\r\n        <div style={{\r\n          position: 'absolute',\r\n          top: '50%',\r\n          left: '50%',\r\n          transform: 'translate(-50%, -50%)',\r\n          color: 'red',\r\n          fontSize: '20px',\r\n          textShadow: '2px 2px 4px rgba(0,0,0,0.5)'\r\n        }}>\r\n          {error}\r\n        </div>\r\n      )}\r\n      <button\r\n        onClick={focusOnCharacter}\r\n        style={{\r\n          position: 'absolute',\r\n          bottom: '20px',\r\n          right: '20px',\r\n          padding: '10px 20px',\r\n          backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n          border: 'none',\r\n          borderRadius: '5px',\r\n          cursor: 'pointer',\r\n          zIndex: 1000\r\n        }}\r\n      >\r\n        Focus on Character\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CanvasScene;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}