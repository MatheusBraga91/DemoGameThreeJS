{"ast":null,"code":"import * as THREE from 'three';\n\n// Mapeamento de modelos para suas texturas\nconst modelTextureMap = {\n  'archer.fbx': {\n    diffuse: 'archer.png'\n    // Adicione outros mapas de textura se disponíveis\n    // normal: 'archer_normal.png',\n    // roughness: 'archer_roughness.png',\n    // metalness: 'archer_metalness.png'\n  },\n  'warrior.fbx': {\n    diffuse: 'warrior.png'\n  },\n  'wizard.fbx': {\n    diffuse: 'wizard.png'\n  }\n};\n\n// Configurações de textura para cada modelo\nconst textureSettings = {\n  'archer.fbx': {\n    repeat: new THREE.Vector2(1, 1),\n    // Repetição da textura\n    offset: new THREE.Vector2(0, 0),\n    // Deslocamento da textura\n    rotation: 0,\n    // Rotação em radianos\n    center: new THREE.Vector2(0.5, 0.5) // Centro de rotação\n  },\n  'warrior.fbx': {\n    repeat: new THREE.Vector2(1, 1),\n    offset: new THREE.Vector2(0, 0),\n    rotation: 0,\n    center: new THREE.Vector2(0.5, 0.5)\n  },\n  'wizard.fbx': {\n    repeat: new THREE.Vector2(1, 1),\n    offset: new THREE.Vector2(0, 0),\n    rotation: 0,\n    center: new THREE.Vector2(0.5, 0.5)\n  }\n};\n\n/**\r\n * Aplica textura a um modelo FBX\r\n * @param {THREE.Object3D} model - O modelo FBX carregado\r\n * @param {string} modelName - Nome do arquivo do modelo (ex: 'archer.fbx')\r\n * @returns {Promise} - Promise que resolve quando a textura é aplicada\r\n */\nexport const applyTextureToModel = (model, modelName) => {\n  return new Promise((resolve, reject) => {\n    const textureMaps = modelTextureMap[modelName];\n    if (!textureMaps) {\n      console.warn(`No texture mapping found for model: ${modelName}`);\n      resolve(model);\n      return;\n    }\n    const textureLoader = new THREE.TextureLoader();\n    const loadTexture = path => {\n      return new Promise((resolve, reject) => {\n        textureLoader.load(`/assets/textures/${path}`, texture => {\n          texture.colorSpace = THREE.SRGBColorSpace;\n          texture.flipY = false;\n          resolve(texture);\n        }, undefined, reject);\n      });\n    };\n\n    // Carregar todas as texturas\n    Promise.all([loadTexture(textureMaps.diffuse)\n    // Adicione outros mapas de textura aqui se necessário\n    ]).then(([diffuseMap]) => {\n      // Aplicar as texturas a todos os meshes do modelo\n      model.traverse(child => {\n        if (child.isMesh) {\n          // Criar novo material PBR\n          const material = new THREE.MeshStandardMaterial({\n            map: diffuseMap,\n            roughness: 0.7,\n            metalness: 0.3\n            // Adicione outros mapas de textura aqui se necessário\n          });\n\n          // Configurar o material\n          material.needsUpdate = true;\n          child.material = material;\n        }\n      });\n      resolve(model);\n    }).catch(error => {\n      console.error(`Error loading textures for ${modelName}:`, error);\n      reject(error);\n    });\n  });\n};\n\n/**\r\n * Carrega e aplica textura a um modelo FBX\r\n * @param {THREE.Object3D} model - O modelo FBX carregado\r\n * @param {string} modelName - Nome do arquivo do modelo\r\n * @returns {Promise} - Promise que resolve com o modelo texturizado\r\n */\nexport const loadAndApplyTexture = async (model, modelName) => {\n  try {\n    const texturedModel = await applyTextureToModel(model, modelName);\n    return texturedModel;\n  } catch (error) {\n    console.error(`Failed to apply texture to ${modelName}:`, error);\n    return model; // Retorna o modelo original em caso de erro\n  }\n};","map":{"version":3,"names":["THREE","modelTextureMap","diffuse","textureSettings","repeat","Vector2","offset","rotation","center","applyTextureToModel","model","modelName","Promise","resolve","reject","textureMaps","console","warn","textureLoader","TextureLoader","loadTexture","path","load","texture","colorSpace","SRGBColorSpace","flipY","undefined","all","then","diffuseMap","traverse","child","isMesh","material","MeshStandardMaterial","map","roughness","metalness","needsUpdate","catch","error","loadAndApplyTexture","texturedModel"],"sources":["M:/DemoGame/src/utils/textureLoader.js"],"sourcesContent":["import * as THREE from 'three';\r\n\r\n// Mapeamento de modelos para suas texturas\r\nconst modelTextureMap = {\r\n  'archer.fbx': {\r\n    diffuse: 'archer.png',\r\n    // Adicione outros mapas de textura se disponíveis\r\n    // normal: 'archer_normal.png',\r\n    // roughness: 'archer_roughness.png',\r\n    // metalness: 'archer_metalness.png'\r\n  },\r\n  'warrior.fbx': {\r\n    diffuse: 'warrior.png',\r\n  },\r\n  'wizard.fbx': {\r\n    diffuse: 'wizard.png',\r\n  }\r\n};\r\n\r\n// Configurações de textura para cada modelo\r\nconst textureSettings = {\r\n  'archer.fbx': {\r\n    repeat: new THREE.Vector2(1, 1),    // Repetição da textura\r\n    offset: new THREE.Vector2(0, 0),    // Deslocamento da textura\r\n    rotation: 0,                        // Rotação em radianos\r\n    center: new THREE.Vector2(0.5, 0.5) // Centro de rotação\r\n  },\r\n  'warrior.fbx': {\r\n    repeat: new THREE.Vector2(1, 1),\r\n    offset: new THREE.Vector2(0, 0),\r\n    rotation: 0,\r\n    center: new THREE.Vector2(0.5, 0.5)\r\n  },\r\n  'wizard.fbx': {\r\n    repeat: new THREE.Vector2(1, 1),\r\n    offset: new THREE.Vector2(0, 0),\r\n    rotation: 0,\r\n    center: new THREE.Vector2(0.5, 0.5)\r\n  }\r\n};\r\n\r\n/**\r\n * Aplica textura a um modelo FBX\r\n * @param {THREE.Object3D} model - O modelo FBX carregado\r\n * @param {string} modelName - Nome do arquivo do modelo (ex: 'archer.fbx')\r\n * @returns {Promise} - Promise que resolve quando a textura é aplicada\r\n */\r\nexport const applyTextureToModel = (model, modelName) => {\r\n  return new Promise((resolve, reject) => {\r\n    const textureMaps = modelTextureMap[modelName];\r\n    if (!textureMaps) {\r\n      console.warn(`No texture mapping found for model: ${modelName}`);\r\n      resolve(model);\r\n      return;\r\n    }\r\n\r\n    const textureLoader = new THREE.TextureLoader();\r\n    const loadTexture = (path) => {\r\n      return new Promise((resolve, reject) => {\r\n        textureLoader.load(\r\n          `/assets/textures/${path}`,\r\n          (texture) => {\r\n            texture.colorSpace = THREE.SRGBColorSpace;\r\n            texture.flipY = false;\r\n            resolve(texture);\r\n          },\r\n          undefined,\r\n          reject\r\n        );\r\n      });\r\n    };\r\n\r\n    // Carregar todas as texturas\r\n    Promise.all([\r\n      loadTexture(textureMaps.diffuse),\r\n      // Adicione outros mapas de textura aqui se necessário\r\n    ])\r\n      .then(([diffuseMap]) => {\r\n        // Aplicar as texturas a todos os meshes do modelo\r\n        model.traverse((child) => {\r\n          if (child.isMesh) {\r\n            // Criar novo material PBR\r\n            const material = new THREE.MeshStandardMaterial({\r\n              map: diffuseMap,\r\n              roughness: 0.7,\r\n              metalness: 0.3,\r\n              // Adicione outros mapas de textura aqui se necessário\r\n            });\r\n\r\n            // Configurar o material\r\n            material.needsUpdate = true;\r\n            child.material = material;\r\n          }\r\n        });\r\n\r\n        resolve(model);\r\n      })\r\n      .catch((error) => {\r\n        console.error(`Error loading textures for ${modelName}:`, error);\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\n/**\r\n * Carrega e aplica textura a um modelo FBX\r\n * @param {THREE.Object3D} model - O modelo FBX carregado\r\n * @param {string} modelName - Nome do arquivo do modelo\r\n * @returns {Promise} - Promise que resolve com o modelo texturizado\r\n */\r\nexport const loadAndApplyTexture = async (model, modelName) => {\r\n  try {\r\n    const texturedModel = await applyTextureToModel(model, modelName);\r\n    return texturedModel;\r\n  } catch (error) {\r\n    console.error(`Failed to apply texture to ${modelName}:`, error);\r\n    return model; // Retorna o modelo original em caso de erro\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}