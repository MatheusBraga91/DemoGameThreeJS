{"ast":null,"code":"var _jsxFileName = \"M:\\\\DemoGame\\\\src\\\\components\\\\CanvasScene.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasScene = () => {\n  _s();\n  const mountRef = useRef(null);\n  const [loading, setLoading] = useState(true);\n  const characterRef = useRef(null);\n  useEffect(() => {\n    // 1. Inicializar cena, câmera e renderizador\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x87ceeb); // Céu azul\n\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(20, 20, 20);\n    camera.lookAt(0, 0, 0);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    mountRef.current.appendChild(renderer.domElement);\n\n    // 2. Criar chão verde\n    const floorSize = 50;\n    const floorGeometry = new THREE.PlaneGeometry(floorSize, floorSize);\n    const floorMaterial = new THREE.MeshStandardMaterial({\n      color: 0x2ecc71,\n      roughness: 0.8,\n      metalness: 0.2\n    });\n    const floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    floor.rotation.x = -Math.PI / 2;\n    floor.receiveShadow = true;\n    scene.add(floor);\n\n    // 3. Adicionar iluminação básica\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(10, 20, 10);\n    directionalLight.castShadow = true;\n    directionalLight.shadow.mapSize.width = 2048;\n    directionalLight.shadow.mapSize.height = 2048;\n    scene.add(directionalLight);\n\n    // 4. Adicionar controles de órbita\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.minDistance = 5;\n    controls.maxDistance = 100;\n    controls.screenSpacePanning = true;\n\n    // 5. Adicionar grid helper para referência\n    const gridHelper = new THREE.GridHelper(floorSize, 20, 0x555555, 0x333333);\n    scene.add(gridHelper);\n\n    // 6. Carregar modelo FBX\n    const loader = new FBXLoader();\n    loader.load('/assets/models/characters/your_character.fbx',\n    // Ajuste o caminho para seu arquivo FBX\n    object => {\n      characterRef.current = object;\n\n      // Ajustar escala do modelo\n      object.scale.set(0.1, 0.1, 0.1); // Ajuste conforme necessário\n\n      // Posicionar o modelo\n      object.position.set(0, 0, 0);\n\n      // Configurar sombras e materiais\n      object.traverse(child => {\n        if (child instanceof THREE.Mesh) {\n          child.castShadow = true;\n          child.receiveShadow = true;\n        }\n      });\n      scene.add(object);\n      setLoading(false);\n    }, xhr => {\n      console.log(xhr.loaded / xhr.total * 100 + '% loaded');\n    }, error => {\n      console.error('Error loading FBX model:', error);\n      setLoading(false);\n    });\n\n    // 7. Função de redimensionamento\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // 8. Loop de animação\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // 9. Limpeza\n    return () => {\n      var _mountRef$current;\n      window.removeEventListener('resize', handleResize);\n      (_mountRef$current = mountRef.current) === null || _mountRef$current === void 0 ? void 0 : _mountRef$current.removeChild(renderer.domElement);\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      width: '100vw',\n      height: '100vh',\n      position: 'fixed',\n      top: 0,\n      left: 0\n    },\n    children: loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        color: 'white',\n        fontSize: '20px',\n        textShadow: '2px 2px 4px rgba(0,0,0,0.5)'\n      },\n      children: \"Loading Character...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(CanvasScene, \"QbrCOFpU1Bzc27z1Q51B+KxlX+g=\");\n_c = CanvasScene;\nexport default CanvasScene;\nvar _c;\n$RefreshReg$(_c, \"CanvasScene\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","OrbitControls","FBXLoader","jsxDEV","_jsxDEV","CanvasScene","_s","mountRef","loading","setLoading","characterRef","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","lookAt","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","type","PCFSoftShadowMap","current","appendChild","domElement","floorSize","floorGeometry","PlaneGeometry","floorMaterial","MeshStandardMaterial","color","roughness","metalness","floor","Mesh","rotation","x","Math","PI","receiveShadow","add","ambientLight","AmbientLight","directionalLight","DirectionalLight","castShadow","shadow","mapSize","width","height","controls","enableDamping","dampingFactor","minDistance","maxDistance","screenSpacePanning","gridHelper","GridHelper","loader","load","object","scale","traverse","child","xhr","console","log","loaded","total","error","handleResize","aspect","updateProjectionMatrix","addEventListener","animate","requestAnimationFrame","update","render","_mountRef$current","removeEventListener","removeChild","dispose","ref","style","top","left","children","transform","fontSize","textShadow","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["M:/DemoGame/src/components/CanvasScene.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';\r\n\r\nconst CanvasScene = () => {\r\n  const mountRef = useRef(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const characterRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // 1. Inicializar cena, câmera e renderizador\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0x87ceeb); // Céu azul\r\n\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    camera.position.set(20, 20, 20);\r\n    camera.lookAt(0, 0, 0);\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n    mountRef.current.appendChild(renderer.domElement);\r\n\r\n    // 2. Criar chão verde\r\n    const floorSize = 50;\r\n    const floorGeometry = new THREE.PlaneGeometry(floorSize, floorSize);\r\n    const floorMaterial = new THREE.MeshStandardMaterial({\r\n      color: 0x2ecc71,\r\n      roughness: 0.8,\r\n      metalness: 0.2\r\n    });\r\n    const floor = new THREE.Mesh(floorGeometry, floorMaterial);\r\n    floor.rotation.x = -Math.PI / 2;\r\n    floor.receiveShadow = true;\r\n    scene.add(floor);\r\n\r\n    // 3. Adicionar iluminação básica\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\r\n    scene.add(ambientLight);\r\n\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n    directionalLight.position.set(10, 20, 10);\r\n    directionalLight.castShadow = true;\r\n    directionalLight.shadow.mapSize.width = 2048;\r\n    directionalLight.shadow.mapSize.height = 2048;\r\n    scene.add(directionalLight);\r\n\r\n    // 4. Adicionar controles de órbita\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true;\r\n    controls.dampingFactor = 0.05;\r\n    controls.minDistance = 5;\r\n    controls.maxDistance = 100;\r\n    controls.screenSpacePanning = true;\r\n\r\n    // 5. Adicionar grid helper para referência\r\n    const gridHelper = new THREE.GridHelper(floorSize, 20, 0x555555, 0x333333);\r\n    scene.add(gridHelper);\r\n\r\n    // 6. Carregar modelo FBX\r\n    const loader = new FBXLoader();\r\n    loader.load(\r\n      '/assets/models/characters/your_character.fbx', // Ajuste o caminho para seu arquivo FBX\r\n      (object) => {\r\n        characterRef.current = object;\r\n        \r\n        // Ajustar escala do modelo\r\n        object.scale.set(0.1, 0.1, 0.1); // Ajuste conforme necessário\r\n        \r\n        // Posicionar o modelo\r\n        object.position.set(0, 0, 0);\r\n        \r\n        // Configurar sombras e materiais\r\n        object.traverse((child) => {\r\n          if (child instanceof THREE.Mesh) {\r\n            child.castShadow = true;\r\n            child.receiveShadow = true;\r\n          }\r\n        });\r\n        \r\n        scene.add(object);\r\n        setLoading(false);\r\n      },\r\n      (xhr) => {\r\n        console.log((xhr.loaded / xhr.total * 100) + '% loaded');\r\n      },\r\n      (error) => {\r\n        console.error('Error loading FBX model:', error);\r\n        setLoading(false);\r\n      }\r\n    );\r\n\r\n    // 7. Função de redimensionamento\r\n    const handleResize = () => {\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n    };\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    // 8. Loop de animação\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      controls.update();\r\n      renderer.render(scene, camera);\r\n    };\r\n    animate();\r\n\r\n    // 9. Limpeza\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      mountRef.current?.removeChild(renderer.domElement);\r\n      renderer.dispose();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={mountRef}\r\n      style={{\r\n        width: '100vw',\r\n        height: '100vh',\r\n        position: 'fixed',\r\n        top: 0,\r\n        left: 0\r\n      }}\r\n    >\r\n      {loading && (\r\n        <div style={{\r\n          position: 'absolute',\r\n          top: '50%',\r\n          left: '50%',\r\n          transform: 'translate(-50%, -50%)',\r\n          color: 'white',\r\n          fontSize: '20px',\r\n          textShadow: '2px 2px 4px rgba(0,0,0,0.5)'\r\n        }}>\r\n          Loading Character...\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CanvasScene;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}