{"ast":null,"code":"import * as THREE from 'three';\n\n// Mapeamento de modelos para suas texturas\nconst modelTextureMap = {\n  'archer.fbx': {\n    diffuse: 'archer/texture_diffuse.png',\n    normal: 'archer/texture_normal.png',\n    metallic: 'archer/texture_metallic.png',\n    roughness: 'archer/texture_roughness.png',\n    pbr: 'archer/texture_pbr.png'\n  },\n  'warrior.fbx': {\n    diffuse: 'warrior/texture_diffuse.png',\n    normal: 'warrior/texture_normal.png',\n    metallic: 'warrior/texture_metallic.png',\n    roughness: 'warrior/texture_roughness.png',\n    pbr: 'warrior/texture_pbr.png'\n  },\n  'wizard.fbx': {\n    diffuse: 'wizard/texture_diffuse.png',\n    normal: 'wizard/texture_normal.png',\n    metallic: 'wizard/texture_metallic.png',\n    roughness: 'wizard/texture_roughness.png',\n    pbr: 'wizard/texture_pbr.png'\n  }\n};\n\n/**\r\n * Aplica textura a um modelo FBX\r\n * @param {THREE.Object3D} model - O modelo FBX carregado\r\n * @param {string} modelName - Nome do arquivo do modelo (ex: 'archer.fbx')\r\n * @returns {Promise} - Promise que resolve quando a textura é aplicada\r\n */\nexport const applyTextureToModel = (model, modelName) => {\n  return new Promise((resolve, reject) => {\n    const textureMaps = modelTextureMap[modelName];\n    if (!textureMaps) {\n      console.warn(`No texture mapping found for model: ${modelName}`);\n      resolve(model);\n      return;\n    }\n    const textureLoader = new THREE.TextureLoader();\n    const loadTexture = path => {\n      return new Promise((resolve, reject) => {\n        textureLoader.load(`/assets/textures/${path}`, texture => {\n          texture.colorSpace = THREE.SRGBColorSpace;\n          texture.flipY = false;\n          resolve(texture);\n        }, undefined, reject);\n      });\n    };\n\n    // Carregar todas as texturas\n    Promise.all([loadTexture(textureMaps.diffuse), loadTexture(textureMaps.normal), loadTexture(textureMaps.metallic), loadTexture(textureMaps.roughness), loadTexture(textureMaps.pbr)]).then(([diffuseMap, normalMap, metallicMap, roughnessMap, pbrMap]) => {\n      // Aplicar as texturas a todos os meshes do modelo\n      model.traverse(child => {\n        if (child.isMesh) {\n          // Criar novo material PBR\n          const material = new THREE.MeshStandardMaterial({\n            map: diffuseMap,\n            // Textura de cor base\n            normalMap: normalMap,\n            // Mapa de normais para detalhes de superfície\n            metalnessMap: metallicMap,\n            // Mapa de metalicidade\n            roughnessMap: roughnessMap,\n            // Mapa de rugosidade\n            aoMap: pbrMap,\n            // Mapa de oclusão ambiente\n            aoMapIntensity: 1.0,\n            // Intensidade da oclusão ambiente\n            normalScale: new THREE.Vector2(1, 1),\n            // Escala do mapa de normais\n            roughness: 1.0,\n            // Rugosidade base\n            metalness: 1.0 // Metalicidade base\n          });\n\n          // Configurar o material\n          material.needsUpdate = true;\n          child.material = material;\n        }\n      });\n      resolve(model);\n    }).catch(error => {\n      console.error(`Error loading textures for ${modelName}:`, error);\n      reject(error);\n    });\n  });\n};\n\n/**\r\n * Carrega e aplica textura a um modelo FBX\r\n * @param {THREE.Object3D} model - O modelo FBX carregado\r\n * @param {string} modelName - Nome do arquivo do modelo\r\n * @returns {Promise} - Promise que resolve com o modelo texturizado\r\n */\nexport const loadAndApplyTexture = async (model, modelName) => {\n  try {\n    const texturedModel = await applyTextureToModel(model, modelName);\n    return texturedModel;\n  } catch (error) {\n    console.error(`Failed to apply texture to ${modelName}:`, error);\n    return model; // Retorna o modelo original em caso de erro\n  }\n};","map":{"version":3,"names":["THREE","modelTextureMap","diffuse","normal","metallic","roughness","pbr","applyTextureToModel","model","modelName","Promise","resolve","reject","textureMaps","console","warn","textureLoader","TextureLoader","loadTexture","path","load","texture","colorSpace","SRGBColorSpace","flipY","undefined","all","then","diffuseMap","normalMap","metallicMap","roughnessMap","pbrMap","traverse","child","isMesh","material","MeshStandardMaterial","map","metalnessMap","aoMap","aoMapIntensity","normalScale","Vector2","metalness","needsUpdate","catch","error","loadAndApplyTexture","texturedModel"],"sources":["M:/DemoGame/src/utils/textureLoader.js"],"sourcesContent":["import * as THREE from 'three';\r\n\r\n// Mapeamento de modelos para suas texturas\r\nconst modelTextureMap = {\r\n  'archer.fbx': {\r\n    diffuse: 'archer/texture_diffuse.png',\r\n    normal: 'archer/texture_normal.png',\r\n    metallic: 'archer/texture_metallic.png',\r\n    roughness: 'archer/texture_roughness.png',\r\n    pbr: 'archer/texture_pbr.png'\r\n  },\r\n  'warrior.fbx': {\r\n    diffuse: 'warrior/texture_diffuse.png',\r\n    normal: 'warrior/texture_normal.png',\r\n    metallic: 'warrior/texture_metallic.png',\r\n    roughness: 'warrior/texture_roughness.png',\r\n    pbr: 'warrior/texture_pbr.png'\r\n  },\r\n  'wizard.fbx': {\r\n    diffuse: 'wizard/texture_diffuse.png',\r\n    normal: 'wizard/texture_normal.png',\r\n    metallic: 'wizard/texture_metallic.png',\r\n    roughness: 'wizard/texture_roughness.png',\r\n    pbr: 'wizard/texture_pbr.png'\r\n  }\r\n};\r\n\r\n/**\r\n * Aplica textura a um modelo FBX\r\n * @param {THREE.Object3D} model - O modelo FBX carregado\r\n * @param {string} modelName - Nome do arquivo do modelo (ex: 'archer.fbx')\r\n * @returns {Promise} - Promise que resolve quando a textura é aplicada\r\n */\r\nexport const applyTextureToModel = (model, modelName) => {\r\n  return new Promise((resolve, reject) => {\r\n    const textureMaps = modelTextureMap[modelName];\r\n    if (!textureMaps) {\r\n      console.warn(`No texture mapping found for model: ${modelName}`);\r\n      resolve(model);\r\n      return;\r\n    }\r\n\r\n    const textureLoader = new THREE.TextureLoader();\r\n    const loadTexture = (path) => {\r\n      return new Promise((resolve, reject) => {\r\n        textureLoader.load(\r\n          `/assets/textures/${path}`,\r\n          (texture) => {\r\n            texture.colorSpace = THREE.SRGBColorSpace;\r\n            texture.flipY = false;\r\n            resolve(texture);\r\n          },\r\n          undefined,\r\n          reject\r\n        );\r\n      });\r\n    };\r\n\r\n    // Carregar todas as texturas\r\n    Promise.all([\r\n      loadTexture(textureMaps.diffuse),\r\n      loadTexture(textureMaps.normal),\r\n      loadTexture(textureMaps.metallic),\r\n      loadTexture(textureMaps.roughness),\r\n      loadTexture(textureMaps.pbr)\r\n    ])\r\n      .then(([diffuseMap, normalMap, metallicMap, roughnessMap, pbrMap]) => {\r\n        // Aplicar as texturas a todos os meshes do modelo\r\n        model.traverse((child) => {\r\n          if (child.isMesh) {\r\n            // Criar novo material PBR\r\n            const material = new THREE.MeshStandardMaterial({\r\n              map: diffuseMap,          // Textura de cor base\r\n              normalMap: normalMap,     // Mapa de normais para detalhes de superfície\r\n              metalnessMap: metallicMap, // Mapa de metalicidade\r\n              roughnessMap: roughnessMap, // Mapa de rugosidade\r\n              aoMap: pbrMap,            // Mapa de oclusão ambiente\r\n              aoMapIntensity: 1.0,      // Intensidade da oclusão ambiente\r\n              normalScale: new THREE.Vector2(1, 1), // Escala do mapa de normais\r\n              roughness: 1.0,           // Rugosidade base\r\n              metalness: 1.0,           // Metalicidade base\r\n            });\r\n\r\n            // Configurar o material\r\n            material.needsUpdate = true;\r\n            child.material = material;\r\n          }\r\n        });\r\n\r\n        resolve(model);\r\n      })\r\n      .catch((error) => {\r\n        console.error(`Error loading textures for ${modelName}:`, error);\r\n        reject(error);\r\n      });\r\n  });\r\n};\r\n\r\n/**\r\n * Carrega e aplica textura a um modelo FBX\r\n * @param {THREE.Object3D} model - O modelo FBX carregado\r\n * @param {string} modelName - Nome do arquivo do modelo\r\n * @returns {Promise} - Promise que resolve com o modelo texturizado\r\n */\r\nexport const loadAndApplyTexture = async (model, modelName) => {\r\n  try {\r\n    const texturedModel = await applyTextureToModel(model, modelName);\r\n    return texturedModel;\r\n  } catch (error) {\r\n    console.error(`Failed to apply texture to ${modelName}:`, error);\r\n    return model; // Retorna o modelo original em caso de erro\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}